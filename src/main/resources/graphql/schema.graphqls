# Reaction Commerce GraphQL Schema
# This is the main schema file that will be expanded during development

# Basic scalar types
scalar DateTime
scalar JSON

# Root Query type
type Query {
    # System information
    ping: String!
    systemInformation: SystemInformation
    
    # Shop queries (to be expanded)
    primaryShop: Shop
    shop(id: ID!): Shop
    
    # Product queries (to be expanded)  
    products(
        shopIds: [ID!]!
        first: Int
        offset: Int
        sortOrder: SortOrder = desc
    ): ProductConnection
    
    # Tag queries
    tag(
        slugOrId: String!
        shopId: ID!
        shouldIncludeInvisible: Boolean = false
    ): Tag
    
    tags(
        shopId: ID!
        filter: String
        excludedTagIds: [ID]
        isTopLevel: Boolean
        shouldIncludeDeleted: Boolean = false
        shouldIncludeInvisible: Boolean = false
        after: String
        before: String
        first: Int
        last: Int
        sortOrder: SortOrder = asc
        sortBy: TagSortByField = position
    ): TagConnection
    
    # Stub for productsByTagId (Products plugin not yet migrated)
    productsByTagId(
        shopId: ID!
        tagId: ID!
        after: String
        before: String
        first: Int
        last: Int
    ): ProductConnection
}

# Root Mutation type
type Mutation {
    # Placeholder mutations (to be expanded)
    echo(message: String!): String!
    
    # Tag mutations
    addTag(input: AddTagInput!): AddTagPayload!
    updateTag(input: UpdateTagInput!): UpdateTagPayload!
}

# Root Subscription type
type Subscription {
    # Placeholder subscriptions (to be expanded)
    ping: String!
}

# Basic types
type SystemInformation {
    version: String!
    uptime: String!
    environment: String!
}

type Shop {
    _id: ID!
    name: String!
    description: String
    currency: String!
    language: String!
    timezone: String
    createdAt: DateTime!
    updatedAt: DateTime!
}

type Product {
    _id: ID!
    title: String!
    description: String
    shopId: ID!
    isVisible: Boolean!
    isDeleted: Boolean!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type ProductConnection {
    nodes: [Product!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

# Tag Types
type Tag {
    _id: ID!
    name: String!
    slug: String
    displayTitle: String
    heroMediaUrl: String
    isVisible: Boolean!
    isDeleted: Boolean!
    isTopLevel: Boolean!
    position: Int
    shopId: ID!
    metafields: [Metafield]
    featuredProductIds: [ID]
    subTagIds: [ID]
    relatedTagIds: [ID]
    createdAt: DateTime!
    updatedAt: DateTime!
}

type Metafield {
    key: String
    namespace: String
    scope: String
    value: String
    valueType: String
    description: String
}

input MetafieldInput {
    key: String!
    namespace: String
    scope: String
    value: String!
    valueType: String
    description: String
}

type TagConnection {
    edges: [TagEdge]
    nodes: [Tag]
    pageInfo: PageInfo!
    totalCount: Int!
}

type TagEdge {
    cursor: String!
    node: Tag
}

# Tag Input Types
input AddTagInput {
    clientMutationId: String
    displayTitle: String
    heroMediaUrl: String
    isVisible: Boolean!
    metafields: [MetafieldInput]
    name: String!
    shopId: ID!
    slug: String
}

type AddTagPayload {
    clientMutationId: String
    shopId: ID!
    tag: Tag!
}

input UpdateTagInput {
    clientMutationId: String
    id: ID!
    displayTitle: String
    featuredProductIds: [ID]
    heroMediaUrl: String
    isVisible: Boolean!
    metafields: [MetafieldInput]
    name: String!
    shopId: ID!
    slug: String
}

type UpdateTagPayload {
    clientMutationId: String
    tag: Tag!
}

# Enums
enum SortOrder {
    asc
    desc
}

enum TagSortByField {
    _id
    createdAt
    name
    position
    updatedAt
}
